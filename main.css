.container-1 a:nth-last-of-type(1n+1){
    color: green;
    padding: 5px;
    border-right: 2px red solid;
}
.container-1 a:last-child{
    border-right: none;
}

.container-1 a:hover{
    color: red;
}
.container-1 a{
    margin-left: -4px;
    padding-left: 5px; 
    color: green;
    /*Тег а является строчным, поэтому сам выстраивается по горизонтали. Разделители установил путем указания бордер. 
    Достоинства: 
    Прост в реализация. Не объемный код. 
    Недостатки:
    На малых экранах выглядят криво бордеры.
    Стилизация основывается на порядке элементов. 
    Появляются отступы между бордерами. Убрать никак не получается. только можно -margin сделать, чтобы вертикальная полоска была посередине. */
}



/*----------------------------------------------------*/
table {
    border-collapse: collapse;
    border: none;
    margin: 10px 0px 10px 0px;
}

td {
    border: none; 
    border-left: 2px solid rgb(247, 4, 4);
    padding: 5px; 
    align-items: center;
    display: inline-block;
}
td:first-child{
    border-left: none;
    padding-left: 0px;
}
a{
    color: green;
}
a:hover{
    color: red;
}
/*Ссылки расположены в ячейках таблицы. Разделители созданы путем установления бордера ячейкам
Недостатки: таблицы, как правило, не рекомендуются для создания макета веб-страницы, потому что они предназначены для представления табличных данных, а не для макетирования. Это может влиять на семантику страницы и создавать проблемы с доступностью и адаптивностьюю.
Таблицы не всегда хорошо масштабируются на мобильных устройствах
Плюсы: Таблицы хорошо поддерживаются во всех современных браузерах,  способ будет работать даже в старых версиях браузеров.
Этот метод прост в понимании и реализации.*/



/*----------------------------------------------------*/

.container-3 ul{
    list-style-type: none;
    display: flex;
    padding: 0px;
}
.container-3 a{
    color: green;
}
.container-3 a:hover{
    color: red;
}
.container-3 li{
    padding-right: 15px;
    position: relative;
}
  
.container-3 li:not(.no-divider)::after {
    content: '';
    position: absolute;
    right: 0;
    top: 60%;
    transform: translateY(-50%);
    height: 150%;
    width: 2px;
    background-color: red;
    margin-right: 6px;
      /* Контейнеру устанавливается display flex - выстраивание ссылок по горизонтали. Элементу li присваивается стилевой селектор псевдоэлемента ::after, а с помощью псевдокласса (:not) разделитель устанавливается всем ссылкам, кроме пятой ссылки.
      Достоинства:
      Прост в реализации.
      Использует стандартные HTML-элементы <ul> и <li>.
      Гибкость настройки стилей с использованием CSS.
      Недостатки:
      Не позволяет создать сложные макеты меню с разными ширинами разделителей. 
      При выравнивании разделителя меняется толщина некоторых разделителей.
      Пришлось использовать класс для последнего тега li*/
}
 

/*----------------------------------------------------*/
.container-4 {
    display: flex;
    align-items: center;
    text-align: center;
}
  
.container-4 a {
    color: green;
}
.container-4 a:hover{
    color: red;
}
.container-4 span {
    color: red;
    margin: 0 5px;
    font-size: 30px;
    font-weight: bolder;
    /*Разместил так же, как и в первом способе. Разделители поставил отдельным символом в теге span.
    Достоинства: Структура кода становится более чистой и читаемой, так как разделители представлены как элементы <span>, и их назначение легко понять, даже без классов.  Установил display flex, отчего на малых экрана отображается визуально более корректно/симпатично/симметрично. 
    Недостатки: Стилизация разделителей ограничена возможностями CSS.*/
}
  

/*----------------------------------------------------*/
.container-5 {
    list-style-type: none;
    padding: 0;
    display: flex;
}
.container-5 a{
    color: green;
}
.container-5 a:hover{
  color: red;
}
.container-5 li {
    position: relative;
    margin: 0px 10px 0px 10px
}  
ul.container-5 li:first-child{
    margin-left: 0px;
}
.container-5 li::after {
    content: "|";
    color: red;
    font-size: 200%;
    position: absolute;
    bottom: -50%;
    transform: translateX(100%);
    font-weight: bolder;
}
  
.container-5 li:last-child::after {
    content: ""; 
    /*По идее, все то же самое, что и в container-3, только не пришлось использовать лишний класс для элемента li. 
    Еще нашел 1 недостаток. Это центрирование разделителя при уменьшении размеров экрана. Пока что не понял, как сделать автоматическое центрирование*/   
} 
